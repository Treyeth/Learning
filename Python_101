Introductory and Intermediate Python

# Print the type of year1
print (type(year1))

# Definition of savings and result
savings = 100
result = 100 * 1.10 ** 7
print("I started with $" + str(savings) + " and now have $" + str(result) + ". Awesome!")

fam = ["liz", 1.73, "emma", 1.68, "mom", 1.71, "dad", 1.89]
fam2 = [["liz", 1.73],
        ["emma", 1.68],
        ["mom", 1.71],
        ["dad", 1.89]]
        
# Create the areas list
areas = ["hallway", 11.25, "kitchen", 18.0, "living room", 20.0, "bedroom", 10.75, "bathroom", 9.50]

# Print out second element from areas
print (areas[1])

# Print out last element from areas
print (areas[-1])

# Print out the area of the living room
print (areas[5])

# Use slicing to create downstairs
downstairs=areas[:6]

# Use slicing to create upstairs
upstairs=areas[-4:]

# Correct the bathroom area
areas[-1]=10.50

# Change "living room" to "chill zone"
areas[4]="chill zone"

# Add poolhouse data to areas, new list is areas_1
areas_1=areas+["poolhouse", 24.5]

# Add garage data to areas_1, new list is areas_2
areas_2=areas_1+["garage",15.45]

# You can remove elements from your list. You can do this with the del statement:
x = ["a", "b", "c", "d"]
del(x[1])

# Create list areas
areas = [11.25, 18.0, 20.0, 10.75, 9.50]

# Create areas_copy
areas_copy = list(areas)

# Change areas_copy
areas_copy[0] = 5.0

# Create variables var1 and var2
var1 = [1, 2, 3, 4]
var2 = True

# Print out type of var1
print (type(var1))

# Print out length of var1
print (len(var1))

# Convert var2 to an integer: out2
out2=int(var2)

# Sort full in descending order: full_sorted
full_sorted=sorted(full,reverse=True)

# Use upper() on place: place_up
place_up=place.upper()

# Create list areas
areas = [11.25, 18.0, 20.0, 10.75, 9.50]

# Print out the index of the element 20.0
print(areas.index(20))

# Print out how often 14.5 appears in areas
print (areas.count(9.50))

# Use append twice to add poolhouse and garage size
areas.append(24.5)
areas.append(15.45)

# Print out the number of o's in place
print(place.count('o'))

# Reverse the orders of the elements in areas
areas.reverse()

# Create list baseball
baseball = [180, 215, 210, 210, 188, 176, 209, 200]

# Import the numpy package as np
import numpy as np

# Create a numpy array from baseball: np_baseball
np_baseball=np.array(baseball)

# Print out type of np_baseball
print (type(np_baseball))

# Import numpy package
import numpy as np

# Create np_baseball (2 cols)
np_baseball = np.array(baseball)

# Print out the 50th row of np_baseball
print (np_baseball[49,:])

# Select the entire second column of np_baseball: np_weight
np_weight=np_baseball[:,1]

# Print out height of 124th player
print (np_baseball[123,0])

# Create np_height from np_baseball
np_height=np_baseball[:,0]

# Print out the mean of np_height
print (np.mean(np_height))

# Print out the median of np_height
print (np.median(np_height))

# Print mean height (first column)
avg = np.mean(np_baseball[:,0])
print("Average: " + str(avg))

# Print median height. Replace 'None'
med = np.median(np_baseball[:,0])
print("Median: " + str(med))

# Print out the standard deviation on height. Replace 'None'
stddev = np.std(np_baseball[:,0])
print("Standard Deviation: " + str(stddev))

# Print out correlation between first and second column. Replace 'None'
corr = np.corrcoef(np_baseball[:,0],np_baseball[:,1])
print("Correlation: " + str(corr))

# Heights of the goalkeepers: gk_heights
gk_heights=np_heights[np_positions=='GK']

# Heights of the other players: other_heights
other_heights=np_heights[np_positions!='GK']

# Print out the median height of goalkeepers. Replace 'None'
print("Median height of goalkeepers: " + str(np.median(gk_heights)))

# Print out the median height of other players. Replace 'None'
print("Median height of other players: " + str(np.median(other_heights)))

